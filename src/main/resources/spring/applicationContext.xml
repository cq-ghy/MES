<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
	<!-- 配置数据库连接信息 -->	
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:db/dbproperties.properties</value>
            </list>
        </property>
    </bean>
	<!--  配置druid连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="3" />
        <property name="minIdle" value="3" />
        <property name="maxActive" value="20" />
        <property name="maxWait" value="60000" />
        <property name="filters" value="stat,wall" />
        <property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
  		<property name="removeAbandonedTimeout" value="180" /> <!-- 1800秒，也就是30分钟 -->
  		<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
    </bean>
	<!-- 配置一个可以执行批量的sqlSession -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean><!-- insert into tablename values (),(),()...; -->
	<!-- 配置mybatis -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation"
			value="classpath:db/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<list>
				<value>classpath*:mapper/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<!-- 管理mybatismapper.xml文件 -->
	<bean id="mapperScannerConfigurer"
		class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.haoyu.**.dao" />
	</bean>
	<!-- 开启事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 开启声明式事务 -->
	<tx:advice id="transactionAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<!-- requied：都得开启事务 -->
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="new*" propagation="REQUIRED" />
			<tx:method name="set*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="change*" propagation="REQUIRED" />
			<!-- read—only='只读' 不开启事务 -->
			<tx:method name="get*" propagation="REQUIRED"
				read-only="true" />
			<tx:method name="find*" propagation="REQUIRED"
				read-only="true" />
			<tx:method name="select*" propagation="REQUIRED"
				read-only="true" />
			<tx:method name="load*" propagation="REQUIRED"
				read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 开始做事务管理这件事情 ：动态代理的过程才能开启事务-->
	<!-- 配置事务切面 -->
	<!-- 对service所有的方法进行事务切面管理 -->
	<aop:config>
		<!-- 配置切点,切的都是service方法 -->
		<!-- 第一个*代表返回值 -->
		<!-- 第二个*代表类名，包含service和serviceimpl -->
		<!-- 第三个*代表方法 -->
		<aop:pointcut id="serviceMethod" expression="execution(* com.haoyu.service.*.*(..))"/>
		<!-- < aop:aspect>大多用于日志，缓存 -->
		<!-- < aop:advisor>大多用于事务管理 -->
		<!-- 区别在于 -->
		<!--juge yes:  setAutoCommit(false)  commit  rollback  no:read-only -->
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="serviceMethod"/>
	</aop:config>
	<!-- 配置druid单项配置 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
    	<!-- slowSqlMillis用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢。slowSqlMillis的缺省值为3000，也就是3秒。 -->
        <property name="slowSqlMillis" value="3000" />
        <!-- 开启日志记录工 -->
        <property name="logSlowSql" value="true" />
        <!-- sql合并功能，提供类似select * from t where id = ?的功能 -->
        <property name="mergeSql" value="true" />
    </bean>
    <!-- 指定数据库类型，druid无法识别由spring自己动态代理后的Proxy Driver -->
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="dbType" value="mysql" />
    </bean>
</beans>